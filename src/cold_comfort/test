(comment "
This program processes a directory of coldfusion files and reports warnings and errors that it finds.
It is intended to be used as part of a testing framework, like Jenkins.
- recursively read in a directory tree of coldfusion files
- process each file through the linter
- linter tokenizes the file
- builds a syntax tree
- looks for bad patterns in the syntax tree
    - patterns should be external plugins
    - a simple pattern might be a xpath like query of the ast
    - 
")


(ns cold-comfort.core
    (:import java.io.File)
    (:import java.io.FileNotFoundException))

(use '[clojure.string :only (split join)])


(defn as-file [s]
  "Return whatever we have as a java.io.File object"
  (cond (instance? File s) s   ; already a file, return unchanged
        (string? s) (File. s)  ; return java.io.File for path s
        :else (throw (FileNotFoundException. (str s)))))

(defn walk [^File dir]
    (let [
            children (.listFiles dir)
            subdirs (filter #(re-matches #"^.(?!git).*" (.getName %)) (filter #(.isDirectory %) children))
            files (filter #(re-matches #".*\.(cfm|cfc)" (.getName %)) (filter #(.isFile %) children))]
        (concat files (mapcat walk subdirs))))

(defn to-ast [code]
    code)

(defn to-tokens [code]
    (split code #"\s+"))

(defn parse-cf [file]
    (let [
        cf-file (slurp (.getAbsolutePath file))
        cf-tokens (to-tokens cf-file)]
    (to-ast cf-tokens)))

(defn -main [& [args]]
    (let [
        files (walk (as-file args))
        tokens (doall (map println (sort (into #{} (mapcat parse-cf files)))))]
    "done"))

